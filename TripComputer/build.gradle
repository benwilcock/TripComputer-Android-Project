/**
 * Can use the following to perform a debug or release:
 * > gradle debug
 * > gradle release
 *
 * debug will run assembleDebug and increment the VersionCode
 * release will run assembleRelease, and increment the VersionName & VersionCode
 *
 */

import java.util.regex.Pattern

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'hugo'

dependencies {
    compile 'com.getbase:floatingactionbutton:1.1.0'
    compile 'com.github.amlcurran.showcaseview:library:5.0.0'
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:appcompat-v7:21.0.2'
    //compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    compile 'com.google.android.gms:play-services:6.1.71'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'de.greenrobot:eventbus:2.2.1'
    compile 'com.google.guava:guava:16.0.1'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.1'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.1'
}

//Android Studio doesn't seem to be using AndroidManifest.xml to determine how to build the APK...

android {
    //Level 21 is Android 5.0 "Lollipop"
    //Level 20 is L Preview / Android Wear
    //Level 19 is Android 4.4 "KitKat"
    //Level 16 is Android 4.1 "Jelly Bean"
    //Level 14 is Android 4.0 "Ice Cream Sandwich"
    //Level 11 is Android 3.0 "Honeycomb"
    //Level 10 is Android 2.3 "Gingerbread"
    //Level 9 is Android 2.3 "Gingerbread"
    //Level 8 is Android 2.2 "Froyo"
    compileSdkVersion 21
    buildToolsVersion '21.1.0'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
    }
    lintOptions {
        lintConfig file("lint.xml")
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        //abortOnError false
    }
    signingConfigs {
        release {
            // We can leave these in environment variables
            storeFile file(System.getenv("KEY_STORE"))
            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword "$System.env.SIGNING_KEY_PASSWORD"
            keyPassword "$System.env.SIGNING_KEY_PASSWORD"
            keyAlias "$System.env.SIGNING_KEY_ALIAS"
        }
    }
    buildTypes {
        debug {
            //debug specific stuff goes here...
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-DEBUG"
            minifyEnabled false
            debuggable true
        }
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            proguardFile 'proguard-additions.txt'
            //proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            // Found in C:\android-studio\sdk\tools\proguard
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }
}

/**
 * Takes the existing versionCode in AndroidManifest.xml and increments it for the next release
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionCode=7
 *   2) The AndroidManifest.xml will be modified so that versionCode=8
 */

task incrementVersionCode << {
    println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    println(":incrementVersionCode - for this build the versionCode is " + mVersionCode);
    //println(":incrementVersionCode - next build will be versionCode " + mNextVersionCode);
    manifestFile.write(manifestContent)
}

/**
 * Takes the existing versionName in AndroidManifest.xml and increments the point number for the next release
 * The AndroidManifest.xml file's versionName needs to be in the format [major].[minor].[point]
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionName=1.3.6
 *   2) TheAndroidManifest.xml will be modified so that versionName=1.3.7
 */

task incrementVersionName << {
    println(":incrementVersionName - Incrementing Version Name...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    println(":incrementVersionName - this build versionName=" + mVersionName);
    println(":incrementVersionName - next build versionName=" + mNextVersionName);
    manifestFile.write(manifestContent)
}

task release << {
    println(":release - Build, VersionName & VersionCode Incremented")
}

task debug << {
    println(":debug - Build, VersionCode Incremented")
}

incrementVersionName.mustRunAfter build
incrementVersionCode.mustRunAfter build

debug.dependsOn assembleDebug
debug.dependsOn incrementVersionCode
debug.dependsOn incrementVersionName

release.dependsOn assembleRelease
release.dependsOn incrementVersionCode
release.dependsOn incrementVersionName
